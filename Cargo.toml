[workspace]
members = ["base", "rcli", "macros", "examples", "grpc", "error-code-02"]
resolver = "2"

[workspace.dependencies]
macros = { path = "macros" }
examples = { path = "examples" }
rcli = { path = "rcli" }
base = { path = "base" }
anyhow = "1.0.91"
enum_dispatch = "0.3.13"
num_enum = "0.5.11" # num 和 enum 互相转换
http = "1.1.0"
base64 = "0.22.0"
# 提供了获取和处理程序回溯（backtrace）信息的功能，允许开发者在程序出错时看到调用栈。通常用于调试目的。
backtrace = "0.3.71"
# 是一个高性能的kv哈希函数,value 是数字
ahash = "0.8.11"
# 加密算法
blake3 = "1.5.4"
bytes = "1.8.0"
# cmd
clap = { version = "4.5.21", features = ["derive"] }
# cmd
dialoguer = { version = "0.11.0", features = ["history", "completion", "fuzzy-matcher", "fuzzy-select", ] }
csv = "1.3.1"
ed25519-dalek = "2.1.1"
time = { version = "0.3.36", features = ["formatting", "parsing", "macros", "std", "local-offset"] }

tower = "0.4.13"
tower-http = { version = "0.5.2", features = ["compression-full", "cors", "trace", "fs"] }

axum = { version = "0.7.7", features = ["http2", "query", "tracing", "multipart", ] }
axum-extra = { version = "0.9.4", features = ["typed-header"] }
typed-builder = "0.20.0"

actix-web = "4.9.0"
# 随机密码
zxcvbn = "3.1.0"
sqlx = { version = "0.8.2", features = ["postgres", "mysql", "runtime-tokio", "tls-rustls", "chrono", ] }
chacha20poly1305 = "0.10.1"
# 时间
chrono = { version = "0.4.38", features = ["serde"] }
dashmap = "5.5.3"
# 并发测试
loom = "0.7.2"
# 随机字符串
nanoid = "0.4.0"
rayon = "1.10.0"
async-std = { version = "1.13.0", features = ["unstable"] }


surf = "2.3.2"
crates-io = "0.40.5"
rand = "0.8.5"
num = "0.4.3"
lazy_static = "1.5.0"
unicode-normalization = "0.1.24"
thiserror = "1.0.69"
num-complex = "0.4.6"
uuid = { version = "1.11.0", features = ["v7", "serde"] }
utoipa = { version = "4.2.3", features = ["axum_extras", "chrono"] }
jwt-simple = "0.12.10"
argon2 = "0.5.3"
fake = { version = "2.10.0", features = ["derive", "chrono", "always-true-rng"] }
sha1 = "0.10.6"
hex = "0.4.3"

# 优化 读多写少
arc-swap = "1.7.1"
# 并发编程的各种工具
crossbeam-utils = "0.8.20"
# 用于消息传递的多生产者多消费者通道
crossbeam-channel = "0.5.13"
once_cell = "1.20.2"
indexmap = "1.9.3"
# 高性能url router
matchit = "0.8.5"
regex = "1.11.1"
futures = "0.3.31"
notify = "6.1.1"
notify-debouncer-mini = "0.4.1"


# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽宏相关的🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
# 从 tokenstream indet 中 获取有用的值
darling = "0.20.10"
# TokenTtream 相关的结构、测试
proc-macro2 = "1.0.89"
# 生成 TokenTtream
quote = "1.0.37"
# Rust语法解析器能够用于解析TokenStream
syn = { version = "2.0.87", features = ["extra-traits"] }
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼




# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽日志相关的🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
log = "0.4.22"
# 日志等级的开关
env_logger = "0.9"
tracing = "0.1.40"
tracing-appender = "0.2.3"
# 通过 RUST_LOG 过滤日志，低于配置级别的日志不会显示
tracing-subscriber = { version = "0.3.18", features = ["local-time", "time", "env-filter"] }
tracing-opentelemetry = "0.23.0"
console-subscriber = "0.2.0"
opentelemetry = "0.22.0"
opentelemetry-otlp = { version = "0.15.0", features = ["tonic"] }
opentelemetry_sdk = { version = "0.22.1", features = ["rt-tokio"] }
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼

# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽 序列化 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
serde = { version = "1.0.215", features = ["derive"] }
serde_with = "3.11.0"
serde_json = "1.0.132"
serde_yaml = "0.9.34"
bson = "2.13.0"
bytesize = "1.3.0"
# 动态类型
rhai = { version = "1.20.0", features = ["serde"] }
# 动态解析字符串
winnow = { version = "0.6.20", features = ["simd"] }
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼

# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽 lang 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
rquickjs = "0.6.2"
napi = "2.16.13"
napi-build = "2.1.3"
napi-derive = "2.16.13"
pyo3 = "0.22.6"
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼


# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽 macos 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
features = "0.10.0"
futures-util = "0.3.31"
derive_builder = "0.20.2"
# 派生大量常用特性，极大地减少了相应的样板代码。From、Into、Add、Subtract、Mul、Div、BitAnd、BitOr、BitXor、Not、PartialEq、PartialOrd、Debug、Display、Clone、Copy、Hash、Serialize、Deserialize等
derive_more = { version = "1.0.0", features = ["full"] }
#提供了一系列宏和特性，使得枚举与字符串的交互变得更加简单和高效。
strum = { version = "0.26.3", features = ["derive"] }
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼



# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽 proto 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
prost = "0.13.3"
prost-build = "0.13.3"
prost-types = "0.13.3"
proto-builder-trait = "0.6.2"
tonic = { version = "0.12.3", features = ["zstd", "tls"] }
tonic-build = "0.12.3"
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼


# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽 async 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
tokio = { version = "1.41.1", features = ["rt", "rt-multi-thread", "macros", "net", "fs"] }
tokio-util = { version = "0.7.12", features = ["codec"] }
tokio-stream = { version = "0.1.16", features = ["sync"] }
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼


# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽 windows 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
# windows path
dunce = "1.0.5"
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼

# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽 k8s 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
# windows path
k8s-openapi = { version = "^0.15", features = ["v1_19", "schemars"] }
kube = { version = "0.74", default-features = false, features = [
    "client",
    "derive",
    "runtime",
    "rustls-tls",
] }
kube-derive = "0.74"
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼



# 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽 流量 🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽🔽
pcap = "0.10.1"
reqwest = { version = "0.12.9", features = ["stream", "multipart", "json"] }
reqwest-eventsource = "0.6.0"
neli = "0.6.4"   # netlink
pnet = "^0.29"    # 跨平台网络库
ipnet = "2"
ipnetwork = "0.18.0"
socket2 = "0.4.4"
# 🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼🔼

pest = { version = "2.7.14", features = ["pretty-print"] }
pest_derive = "2.7.14"
signal-hook = "0.3"

wasmtime = "12.0.2"
wasmtime-wasi = "12.0.2"

# bench 性能测试
criterion = "0.3.6"
tempfile = "3.14.0"
lru = "0.9.0"
uluru = "3.1.0"
cfg-if = "1.0"

bollard = "0.16.1"
hostname = "0.3.1"
dns-lookup = "1.0.8"
elf = "0.4.0"
envmnt = "0.10.4"
flexi_logger = { version = "0.23.3", features = ["use_chrono_for_offset"] }
humantime-serde = "1.1"
hyper = { version = "0.14", features = ["full"] }
md-5 = "0.10.6"
nom = "7.1.3"
page_size = "0.4.2"
pcap-sys = "0.1.3"
ring = "0.16.20"
roxmltree = "0.14.1"

sysinfo = { version = "0.26", default-features = false }
zstd = "0.13.2"
cgroups-rs = "0.2.11"
schemars = "0.8"
bincode = "2.0.0-rc.3"
bitflags = "1.3.2"
cadence = "0.27.0"
flate2 = "1.0.34"
libc = "0.2.162"
parking_lot = "0.11"
btf-rs = "1.1"
# 用于读取和写入DWARF调试格式的库。
gimli = "0.31"
# 统一的接口来处理跨平台的对象文件
object = "0.36"
# 用于将Rust编译器生成的混淆名称(比如在错误信息中)转换回更可读的形式。
rustc-demangle = "0.1.24"
# 用于将一组 C/C++/Assembly/CUDA 文件编译成静态存档，以便 Cargo 链接到正在构建的包中。
cc = "1.2"
# 提供堆栈展开功能的库，这在处理异常时非常有用。
unwind="0.4.2"
#用于确定Unicode字符宽度的库，这在文本渲染和处理中特别有用，有助于文本格式化。
unicode-width = "0.2.0"


[patch.crates-io]

#[target.'cfg(target_os = "windows")'.dependencies]
#winapi = { version = "0.3.9", features = [
#    "errhandlingapi",
#    "libloaderapi",
#    "minwindef",
#    "winerror",
#] }
#windows = { version = "0.30", features = [
#    "Win32_Foundation",
#    "Win32_System_Diagnostics_ToolHelp",
#    "Win32_NetworkManagement_IpHelper",
#    "Win32_Networking_WinSock",
#    "Win32_System_LibraryLoader",
#    "Win32_System_Threading",
#    "Win32_System_ProcessStatus",
#] }

