[package]
name = "examples"
version = "0.1.0"
edition = "2021"
license = "MIT"

[dependencies]
error-code = { path = "error-code" }
anyhow = { workspace = true }
axum = { workspace = true }
base64 = { workspace = true }
blake3 = { workspace = true }
bytes = { workspace = true }
chacha20poly1305 = { workspace = true }
chrono = { workspace = true }
dashmap = { workspace = true }
derive_builder = { workspace = true }
derive_more = { workspace = true }
futures = { workspace = true }
http = { workspace = true }
nanoid = { workspace = true }
opentelemetry = { workspace = true }
opentelemetry-otlp = { workspace = true }
opentelemetry_sdk = { workspace = true }
tracing-opentelemetry = { workspace = true }
serde = { workspace = true }
serde_json = { workspace = true }
serde_with = { workspace = true }
sqlx = { workspace = true }
strum = { workspace = true }
thiserror = { workspace = true }
tokio = { workspace = true }
tokio-util = { workspace = true }
enum_dispatch = { workspace = true }
tracing = { workspace = true }
tracing-subscriber = { workspace = true }
tracing-appender = { workspace = true }
tower-http = { workspace = true }
tokio-stream = { workspace = true }
jwt-simple = { workspace = true }
uuid = { workspace = true }
reqwest = { workspace = true }
tower = { workspace = true }
backtrace = { workspace = true }
argon2 = { workspace = true }
reqwest-eventsource = { workspace = true }
axum-extra = { workspace = true }
rand = { workspace = true }
fake = { workspace = true }
sha1 = { workspace = true }
hex = { workspace = true }
prost = { workspace = true }
prost-build = { workspace = true }
prost-types = { workspace = true }
proto-builder-trait = { workspace = true }
loom = { workspace = true }
tonic-build = { workspace = true }
arc-swap = { workspace = true }
crossbeam-utils = { workspace = true }
dialoguer = { workspace = true }
rquickjs = { workspace = true }
matchit = { workspace = true }
indexmap = { workspace = true }
notify = { workspace = true }
notify-debouncer-mini = { workspace = true }
typed-builder = { workspace = true }
once_cell = { workspace = true }
crossbeam-channel = { workspace = true }
regex = { workspace = true }
rhai = { workspace = true }
winnow = { workspace = true }
pest = { workspace = true }
pest_derive = { workspace = true }
rustc-demangle = { workspace = true }
dunce = { workspace = true }
cc = { workspace = true }
cfg-if = { workspace = true }
ahash = { workspace = true }
unicode-width = { workspace = true }
actix-web= { workspace = true }
async-std.workspace = true
lazy_static.workspace = true
surf.workspace = true

[dev-dependencies]
criterion = { workspace = true }


[build-dependencies]
cc = { workspace = true }

#pest =  { workspace = true }
#pest_derive =  { workspace = true }

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[[bench]]
name = "criterion"
harness = false
# 不使用 Rust 的默认测试框架（libtest）来运行这些基准测试。这意味着你需要在你的代码中提供一个自己的 main 函数来控制基准测试的执行
# Rust 的基准测试是通过 libtest 运行的，它会自动执行所有用 #[bench] 属性标注的函数
